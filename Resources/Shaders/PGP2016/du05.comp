#version 430
/* Nastavevi velikost work group */
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// struktura pro kouli
struct Ball {
	vec2 pos;
	vec2 speed;
	mat4 m;
};

// buffer pro cteni
layout(std430, binding = 0) readonly buffer ballBuffer{
    Ball readBalls[];
};
// buffer pro zapis
layout(std430, binding = 1) writeonly buffer ballBuffer2{
    Ball writeBalls[];
};

// cas od miluneho snimku
uniform float dt; 
// limity pro pozici kouli
uniform float width; 
uniform float height;
// pocet kouil
uniform int ballCount; 
// velikost kouli
uniform float ballRadius;

void main(){
	uint id = gl_GlobalInvocationID.x;
	if(id>ballCount)return;
	
	// nacteni jedne koule
	vec2 pos = readBalls[id].pos;
	vec2 speed = readBalls[id].speed;
	mat4 m = readBalls[id].m;

	/*****  DOPLNIT  *****/
	/*
	- posun koule v zavislosti na jeji rychlosti a uplynulem case
	- kontrola kolize se stolem
	- kontrola kolize s ostatnimi koulemi - statci kdyz se *nejak* odrazi
	- vypocet nove matice a zapis zpet do bufferu
	- BONUS: rotace kouli po smeru pohybu
	- BONUS: co nejrealnejsi fyzika
	*/

	// zapis do bufferu
	writeBalls[id].pos = pos;
	writeBalls[id].speed = speed;
	writeBalls[id].m = m;	
}
